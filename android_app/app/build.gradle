apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"
    defaultConfig {
        applicationId "com.match.android"
        minSdkVersion 23
        targetSdkVersion 29
        versionCode 1
        versionName "0.0.1"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    sourceSets {
        main {
            jni.srcDirs = []
            jniLibs.srcDir 'src/main/libs'
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    dataBinding {
        enabled = true
    }
    viewBinding {
        enabled = true
    }
}

ext {
    koin_version = "2.1.0"
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    testImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.navigation:navigation-fragment-ktx:2.3.0'
    implementation 'androidx.navigation:navigation-ui-ktx:2.3.0'
    implementation "org.koin:koin-androidx-scope:$koin_version"
    implementation "org.koin:koin-androidx-viewmodel:$koin_version"
    implementation "io.reactivex.rxjava2:rxkotlin:2.4.0"
    implementation "io.reactivex.rxjava2:rxandroid:2.1.1"
    implementation "androidx.lifecycle:lifecycle-reactivestreams-ktx:2.2.0"
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    implementation 'com.google.code.gson:gson:2.8.6'
}

def rustBasePath = "../.."
def archTriplets = [
    'armeabi-v7a': 'arm-linux-androideabi',
    'arm64-v8a': 'aarch64-linux-android',
    'x86_64': 'x86_64-linux-android',
    'x86': 'i686-linux-android'
]

// TODO: only pass --release if buildType is release
archTriplets.each { arch, target ->

    // Build Rust lib
    tasks.create(name: "cargo-build-$arch", type: Exec, description: "Building core for $arch") {
            workingDir rustBasePath
            executable "cargo"
            args = ["ndk", "--platform", "29", "--target", target, "build", "--verbose"]
    }

    // Copy Rust lib into this app's libs directory
    tasks.create(name: "rust-deploy-$arch", type: Copy, dependsOn: "cargo-build-$arch",
            description: "Copy rust libs for ($arch) to libs") {

        from "$rustBasePath/target/$target/debug"
        include "*.so"
        into "$rustBasePath/android_app/app/src/main/libs/$arch"
    }

    // Hook up tasks to execute before building java
    tasks.withType(JavaCompile) {
        compileTask -> compileTask.dependsOn "rust-deploy-$arch"
    }
}

repositories {
    mavenCentral()
}
